/*
 * hdr_tonemap_filter.effect
 * Copyright © OBS Project contributors
 * Copyright © 2025 Toru Yoshihara
 *
 * This file is part of OBS Studio.
 * OBS Studio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See https://github.com/obsproject/obs-studio/blob/master/COPYING for details.
 *
 * Modified by Toru Yoshihara, 2025:
 *  - Added parameters for False Color display.
 *  - Added the following functions:
 *       • apply_sdr_false_color
 *       • interp_palette
 *       • apply_palette0 … apply_palette6
 *       • apply_false_color_y
 *       • apply_false_color_maxRGB
 *  - Changed the main processing function of PSReinhard to apply_false_color_y.
 *  - Changed the main processing function of PSMaxrgb to apply_false_color_maxRGB.
 */

#include "color.effect"

// Threshold values (threshold_list = [1, 2, 4, 6, 10, 20, 40, 101])
uniform float t1 = 1.0;
uniform float t2 = 2.0;
uniform float t3 = 4.0;
uniform float t4 = 6.0;
uniform float t5 = 10.0;
uniform float t6 = 20.0;
uniform float t7 = 40.0;
uniform float t8 = 101.0;

// Palette definitions (palette_0 through palette_6, each with 6 entries)
// declared as uniforms instead of static const float3 ...

// palette_0
uniform float3 p0_0 = { 0.046591, 0.073635, 0.217070 };
uniform float3 p0_1 = { 0.055910, 0.091194, 0.304694 };
uniform float3 p0_2 = { 0.065911, 0.109914, 0.414175 };
uniform float3 p0_3 = { 0.076559, 0.129407, 0.548855 };
uniform float3 p0_4 = { 0.087817, 0.149194, 0.712430 };
uniform float3 p0_5 = { 0.099653, 0.168690, 0.908980 };

// palette_1
uniform float3 p1_0 = { 0.264122, 0.435337, 0.446144 };
uniform float3 p1_1 = { 0.286736, 0.515038, 0.530948 };
uniform float3 p1_2 = { 0.309095, 0.603776, 0.626191 };
uniform float3 p1_3 = { 0.330952, 0.702089, 0.732629 };
uniform float3 p1_4 = { 0.352043, 0.810523, 0.851048 };
uniform float3 p1_5 = { 0.372089, 0.929636, 0.982266 };

// palette_2
uniform float3 p2_0 = { 0.207333, 0.387783, 0.119163 };
uniform float3 p2_1 = { 0.230637, 0.471516, 0.117274 };
uniform float3 p2_2 = { 0.254657, 0.565851, 0.113427 };
uniform float3 p2_3 = { 0.279256, 0.671468, 0.107447 };
uniform float3 p2_4 = { 0.304278, 0.789061, 0.099156 };
uniform float3 p2_5 = { 0.329557, 0.919339, 0.088376 };

// palette_3
uniform float3 p3_0 = { 0.501251, 0.526626, 0.195205 };
uniform float3 p3_1 = { 0.576701, 0.605714, 0.182762 };
uniform float3 p3_2 = { 0.659481, 0.691190, 0.167568 };
uniform float3 p3_3 = { 0.749973, 0.783222, 0.149506 };
uniform float3 p3_4 = { 0.848567, 0.881968, 0.128462 };
uniform float3 p3_5 = { 0.955659, 0.987578, 0.104328 };

// palette_4
uniform float3 p4_0 = { 0.298087, 0.203114, 0.080708 };
uniform float3 p4_1 = { 0.365667, 0.234347, 0.077185 };
uniform float3 p4_2 = { 0.442673, 0.267493, 0.072056 };
uniform float3 p4_3 = { 0.529810, 0.302443, 0.065210 };
uniform float3 p4_4 = { 0.627809, 0.339065, 0.056540 };
uniform float3 p4_5 = { 0.737423, 0.377211, 0.045940 };

// palette_5
uniform float3 p5_0 = { 0.197073, 0.059007, 0.030457 };
uniform float3 p5_1 = { 0.258421, 0.064411, 0.029676 };
uniform float3 p5_2 = { 0.330901, 0.068518, 0.027974 };
uniform float3 p5_3 = { 0.415559, 0.070943, 0.025256 };
uniform float3 p5_4 = { 0.513485, 0.071268, 0.021430 };
uniform float3 p5_5 = { 0.625815, 0.069046, 0.016407 };

// palette_6
uniform float3 p6_0 = { 0.260558, 0.100149, 0.316843 };
uniform float3 p6_1 = { 0.322940, 0.102955, 0.402889 };
uniform float3 p6_2 = { 0.394382, 0.102992, 0.503758 };
uniform float3 p6_3 = { 0.475585, 0.099685, 0.620992 };
uniform float3 p6_4 = { 0.567276, 0.092410, 0.756237 };
uniform float3 p6_5 = { 0.670206, 0.080494, 0.911242 };

uniform float4x4 ViewProj;
uniform texture2d image;

uniform float multiplier;
uniform float input_maximum_nits;
uniform float output_maximum_nits;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertOut {
	float2 uv  : TEXCOORD0;
	float4 pos : POSITION;
};

struct FragData {
	float2 uv  : TEXCOORD0;
};

VertOut VSHdrTonemap(VertData v_in)
{
	VertOut vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

// Apply SDR false color (monochrome gamma correction)
float3 apply_sdr_false_color(float y)
{
    float v = pow(y, 1.0 / 1.1);
    return float3(v, v, v);
}

// Interpolate between two palette entries
float3 interp_palette(float3 a, float3 b, float segmentStart, float segmentEnd, float x)
{
    return lerp(a, b, (x - segmentStart) / (segmentEnd - segmentStart));
}

// Palette functions for each band (x in [0,1])
float3 apply_palette0(float x)
{
    if (x <= 0.2)  return lerp(p0_0, p0_1, x / 0.2);
    if (x <= 0.4)  return lerp(p0_1, p0_2, (x - 0.2) / 0.2);
    if (x <= 0.6)  return lerp(p0_2, p0_3, (x - 0.4) / 0.2);
    if (x <= 0.8)  return lerp(p0_3, p0_4, (x - 0.6) / 0.2);
                   return lerp(p0_4, p0_5, (x - 0.8) / 0.2);
}

float3 apply_palette1(float x)
{
    if (x <= 0.2)  return lerp(p1_0, p1_1, x / 0.2);
    if (x <= 0.4)  return lerp(p1_1, p1_2, (x - 0.2) / 0.2);
    if (x <= 0.6)  return lerp(p1_2, p1_3, (x - 0.4) / 0.2);
    if (x <= 0.8)  return lerp(p1_3, p1_4, (x - 0.6) / 0.2);
                   return lerp(p1_4, p1_5, (x - 0.8) / 0.2);
}

float3 apply_palette2(float x)
{
    if (x <= 0.2)  return lerp(p2_0, p2_1, x / 0.2);
    if (x <= 0.4)  return lerp(p2_1, p2_2, (x - 0.2) / 0.2);
    if (x <= 0.6)  return lerp(p2_2, p2_3, (x - 0.4) / 0.2);
    if (x <= 0.8)  return lerp(p2_3, p2_4, (x - 0.6) / 0.2);
                   return lerp(p2_4, p2_5, (x - 0.8) / 0.2);
}

float3 apply_palette3(float x)
{
    if (x <= 0.2)  return lerp(p3_0, p3_1, x / 0.2);
    if (x <= 0.4)  return lerp(p3_1, p3_2, (x - 0.2) / 0.2);
    if (x <= 0.6)  return lerp(p3_2, p3_3, (x - 0.4) / 0.2);
    if (x <= 0.8)  return lerp(p3_3, p3_4, (x - 0.6) / 0.2);
                   return lerp(p3_4, p3_5, (x - 0.8) / 0.2);
}

float3 apply_palette4(float x)
{
    if (x <= 0.2)  return lerp(p4_0, p4_1, x / 0.2);
    if (x <= 0.4)  return lerp(p4_1, p4_2, (x - 0.2) / 0.2);
    if (x <= 0.6)  return lerp(p4_2, p4_3, (x - 0.4) / 0.2);
    if (x <= 0.8)  return lerp(p4_3, p4_4, (x - 0.6) / 0.2);
                   return lerp(p4_4, p4_5, (x - 0.8) / 0.2);
}

float3 apply_palette5(float x)
{
    if (x <= 0.2)  return lerp(p5_0, p5_1, x / 0.2);
    if (x <= 0.4)  return lerp(p5_1, p5_2, (x - 0.2) / 0.2);
    if (x <= 0.6)  return lerp(p5_2, p5_3, (x - 0.4) / 0.2);
    if (x <= 0.8)  return lerp(p5_3, p5_4, (x - 0.6) / 0.2);
                   return lerp(p5_4, p5_5, (x - 0.8) / 0.2);
}

float3 apply_palette6(float x)
{
    if (x <= 0.2)  return lerp(p6_0, p6_1, x / 0.2);
    if (x <= 0.4)  return lerp(p6_1, p6_2, (x - 0.2) / 0.2);
    if (x <= 0.6)  return lerp(p6_2, p6_3, (x - 0.4) / 0.2);
    if (x <= 0.8)  return lerp(p6_3, p6_4, (x - 0.6) / 0.2);
                   return lerp(p6_4, p6_5, (x - 0.8) / 0.2);
}

// Main false color function for luminance Y
float3 apply_false_color_y(float3 rgb)
{
    // Compute luma in Rec.2020-Linear space
    float y = dot(rgb, float3(0.262700212, 0.677998072, 0.0593017165));
    y = clamp(y, 0.0f, 100.0f);

    if (y <= t1) {
        // SDR region: monochrome mapping
        return apply_sdr_false_color(y);
    }
    else if (y <= t2) {
        float x = (y - t1) / (t2 - t1);
        return apply_palette0(x);
    }
    else if (y <= t3) {
        float x = (y - t2) / (t3 - t2);
        return apply_palette1(x);
    }
    else if (y <= t4) {
        float x = (y - t3) / (t4 - t3);
        return apply_palette2(x);
    }
    else if (y <= t5) {
        float x = (y - t4) / (t5 - t4);
        return apply_palette3(x);
    }
    else if (y <= t6) {
        float x = (y - t5) / (t6 - t5);
        return apply_palette4(x);
    }
    else if (y <= t7) {
        float x = (y - t6) / (t7 - t6);
        return apply_palette5(x);
    }
    else if (y <= t8) {
        float x = (y - t7) / (t8 - t7);
        return apply_palette6(x);
    }

    // Above the highest threshold: use final palette color
    return p6_5;
}

float3 apply_false_color_maxRGB(float3 rgb)
{
    // Compute luma in Rec.2020-Linear space
    float y = max(rgb.r, max(rgb.g, rgb.b));

    if (y <= t1) {
        // SDR region: monochrome mapping
        float mono = dot(rgb, float3(0.262700212, 0.677998072, 0.0593017165));
        return apply_sdr_false_color(mono);
    }
    else if (y <= t2) {
        float x = (y - t1) / (t2 - t1);
        return apply_palette0(x);
    }
    else if (y <= t3) {
        float x = (y - t2) / (t3 - t2);
        return apply_palette1(x);
    }
    else if (y <= t4) {
        float x = (y - t3) / (t4 - t3);
        return apply_palette2(x);
    }
    else if (y <= t5) {
        float x = (y - t4) / (t5 - t4);
        return apply_palette3(x);
    }
    else if (y <= t6) {
        float x = (y - t5) / (t6 - t5);
        return apply_palette4(x);
    }
    else if (y <= t7) {
        float x = (y - t6) / (t7 - t6);
        return apply_palette5(x);
    }
    else if (y <= t8) {
        float x = (y - t7) / (t8 - t7);
        return apply_palette6(x);
    }

    // Above the highest threshold: use final palette color
    return p6_5;
}

float4 PSReinhard(FragData f_in) : TARGET
{
	float4 rgba = image.Sample(textureSampler, f_in.uv);
	rgba.rgb *= multiplier;
	rgba.rgb = rec709_to_rec2020(rgba.rgb);
	rgba.rgb = apply_false_color_y(rgba.rgb);
	rgba.rgb = rec2020_to_rec709(rgba.rgb);
	return rgba;
}

float4 PSMaxrgb(FragData f_in) : TARGET
{
	float4 rgba = image.Sample(textureSampler, f_in.uv);
	rgba.rgb = rec709_to_rec2020(rgba.rgb);
	rgba.rgb = apply_false_color_maxRGB(rgba.rgb);
	rgba.rgb = rec2020_to_rec709(rgba.rgb);
	return rgba;
}

float4 PSMaxrgbSdr(FragData f_in) : TARGET
{
	float4 rgba = image.Sample(textureSampler, f_in.uv);
	rgba.rgb *= multiplier;
	rgba.rgb = rec709_to_rec2020(rgba.rgb);
	rgba.rgb = maxRGB_eetf_linear_to_linear(rgba.rgb, input_maximum_nits, output_maximum_nits);
	rgba.rgb = rec2020_to_rec709(rgba.rgb);
	rgba.rgb *= 10000. / output_maximum_nits;
	rgba.rgb = pow(saturate(rgba.rgb), float3(1. / 2.4, 1. / 2.4, 1. / 2.4));
	rgba.rgb = srgb_nonlinear_to_linear(rgba.rgb);
	return rgba;
}

technique Reinhard
{
	pass
	{
		vertex_shader = VSHdrTonemap(v_in);
		pixel_shader  = PSReinhard(f_in);
	}
}

technique MaxRGB
{
	pass
	{
		vertex_shader = VSHdrTonemap(v_in);
		pixel_shader  = PSMaxrgb(f_in);
	}
}

technique MaxRGBSDR
{
	pass
	{
		vertex_shader = VSHdrTonemap(v_in);
		pixel_shader  = PSMaxrgbSdr(f_in);
	}
}
